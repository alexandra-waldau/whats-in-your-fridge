{"version":3,"sources":["components/recipe-list.js","components/recipe.js","components/recipes-view.js","components/search.js","serviceWorker.js","index.js"],"names":["RecipeItem","props","image","recipeTitle","title","likes","className","src","alt","id","onClick","buttonClick","MarkedIngredient","missed","includes","name","original","Recipe","state","missedIngredients","allIngredients","information","steps","this","fetchRecipe","toString","getMissedIngredients","prevProps","refresh","requestInfoURL","concat","requestStepsURL","Promise","all","fetch","info","json","infoResult","stepsResult","setState","extendedIngredients","console","log","ingredients","forEach","ingredient","push","key","servings","readyInMinutes","map","length","step","each","Math","random","Component","Counter","count","Recipes","recipes","showRecipeDetail","showRecipeID","fetchRecipes","url","response","data","counter","recipe","showRecipe","Search","inputValue","recipesVisible","refreshRecipes","searchURL","value","filter","newIngredient","slice","requestURL","noDuplicates","arrayLength","getRequestURL","type","placeholder","onChange","event","updateInput","target","addIngredient","deleteIngredient","disabled","search","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.81442e72.chunk.js","sourcesContent":["import React from 'react';\nimport { FaHeart } from 'react-icons/fa';\nimport './recipe-list.css';\n\n//recipe list component\nfunction RecipeItem(props) {\n    const image = props.image;\n    const recipeTitle = props.title;\n    const likes = props.likes;\n\n    return (\n    <div className=\"recipe item\">\n        <div className=\"image-cropper\">\n            <img src={image} alt=\"jpg\"/>\n        </div>\n        <div className=\"recipe description\"> \n            <h2>{recipeTitle}</h2>\n            <div className=\"likes\">\n                <FaHeart/>\n                <p>{likes}</p>\n            </div>\n        </div>\n        <button id=\"open-recipe\" onClick={props.buttonClick}>View recipe</button>\n    </div>\n    )\n}\n\nexport default RecipeItem;","import React, { Component } from 'react';\nimport { FaCheck, FaTimes } from 'react-icons/fa';\nimport './recipe.css';\n\nclass Recipe extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {  \n            missedIngredients: [],\n            allIngredients: [],\n            information: [],\n            steps: []\n        };\n    }\n\n    componentDidMount() {\n        this.fetchRecipe(this.props.id.toString());\n        this.getMissedIngredients(this.props.missed);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.refresh!== prevProps.refresh) {\n            this.fetchRecipe(this.props.id);\n            this.getMissedIngredients(this.props.missed);\n        }\n    }\n\n    //fetch recipe information and instructions\n    async fetchRecipe(id) {\n        let requestInfoURL = \"https://api.spoonacular.com/recipes/\".concat(id, \"/information?apiKey=eebaf36af5f24fd3ae3a2bd4095cf3cc\");\n        let requestStepsURL = \"https://api.spoonacular.com/recipes/\".concat(id, \"/analyzedInstructions?apiKey=eebaf36af5f24fd3ae3a2bd4095cf3cc\");\n\n        try {\n            const [info, steps] = await Promise.all([fetch(requestInfoURL), fetch(requestStepsURL)]);\n            const infoResult = await info.json();\n            const stepsResult = await steps.json();\n            this.setState ({\n                information: infoResult,\n                steps: stepsResult,\n                allIngredients: infoResult.extendedIngredients\n            });\n        }\n        catch(error) {\n            console.log(error);\n        }   \n    }\n\n    //store ingredient names for later comparison\n    getMissedIngredients(ingredients) {\n        let missed = [];\n\n        ingredients.forEach(ingredient => {\n            missed.push(ingredient.name)\n        });\n\n        this.setState ({\n            missedIngredients: missed\n        })\n    }\n\n    //render recipe information and, if available, instructions\n    render() { \n    return ( \n            <div className=\"recipe detail\">\n                    <div className=\"img-cropper\">\n                        <img src={this.state.information.image} alt=\"jpg\"/>\n                    </div>\n                    <div className=\"recipe-information\">\n                    <h2>{this.state.information.title}</h2>\n                    <ul>\n                        <li key=\"servings\">{this.state.information.servings} servings</li>\n                        <li key=\"time\">{this.state.information.readyInMinutes} minutes</li>\n                    </ul>\n                    <h2>Ingredients:</h2>  \n                    <ul>{this.state.allIngredients.map(ingredient => {\n                        return (\n                            <MarkedIngredient key={ingredient.id} name={ingredient.name} \n                            original={ingredient.original} missed={this.state.missedIngredients}/>\n                        );\n                        })}\n                    </ul>  \n                </div>\n                <h2 id=\"prep\">{this.state.steps.length ? \"Preparation:\" : null}</h2>\n                {this.state.steps.map(step => {\n                    return (\n                        <div className=\"recipe-steps\">\n                            <ol>{step.steps.map(each => {\n                                return (<li key={1+Math.random()}>{each.step}</li>);\n                                })}\n                            </ol>\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\n//compare missed ingredients with complete ingredient list\nfunction MarkedIngredient(props) {\n    return (\n    <li className=\"ingredient\">{props.missed.includes(props.name) ? \n    <div><FaTimes className=\"cross\"/>{props.original}</div> : <div><FaCheck className=\"check\"/>{props.original}</div>}</li>\n    );\n}\n\nexport { MarkedIngredient };\nexport default Recipe;\n","import React, { Component } from 'react';\nimport './recipes-view.css';\nimport  RecipeItem from './recipe-list';\nimport Recipe from './recipe';\n\nclass Recipes extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            recipes: [],\n            showRecipeDetail: false,\n            showRecipeID: '',\n            missedIngredients: [],\n        };\n    }\n\n    //lifecycle method, invoked after component is inserted into component tree\n    componentDidMount() {\n        this.fetchRecipes(this.props.url);\n    }\n\n    //refresh recipe list if necessary\n    componentDidUpdate(prevProps) {\n        if (this.props.refresh!== prevProps.refresh) {\n            this.fetchRecipes(this.props.url);\n        }\n    }\n\n    //fetch recipes from request url \n    async fetchRecipes(url) {\n        try {\n            const response = await fetch(url);\n            const data = await response.json();\n    \n            //immediately set counter\n            this.setState ({\n                recipes: data,\n                counter: data.length\n            });\n\n            //reset showRecipeID to false to hide recipe detail component \n            if(data.length === 0) {\n                this.setState ({\n                    showRecipeID: \"\"\n                })\n            }\n        }\n        catch(error) {\n            console.log(error);\n        }   \n    }\n\n    //trigger recipe detail and pass missed ingredients\n    showRecipe(id, ingredients) {\n        this.setState ({\n            showRecipeDetail: !this.state.showRecipeDetail,\n            showRecipeID: id,\n            missedIngredients: ingredients\n        })\n    }\n\n    //show recipe list or display error message if counter is zero\n    //send props to recipe item component to display a recipe in the list\n    //if necessary, notify component that recipe detail component should be displayed \n    render() { \n        return ( \n        <div id=\"wrapper\">\n        <Counter count={this.state.counter}/>\n        <div id=\"recipe-view\">\n            {(this.state.counter !== 0) ?\n            <div className=\"recipes-list\">{this.state.recipes.map(recipe => {\n                return (<RecipeItem key={recipe.id} title={recipe.title}\n                    image={recipe.image} likes={recipe.likes} \n                    buttonClick={() => this.showRecipe(recipe.id, recipe.missedIngredients)}/>)\n                })}\n            </div> : <div id=\"no-results\">Sorry, no results have been found.</div>}\n            <div className=\"recipe-detail\">\n                {this.state.showRecipeID && <Recipe id={this.state.showRecipeID} \n                missed={this.state.missedIngredients} refresh={this.state.showRecipeDetail}/>}\n            </div>\n        </div>\n        </div>\n    )}\n}\n\n//counter component\nfunction Counter(props) {\n    return (\n    <p id=\"counter\">{props.count} results</p>\n    );\n}\n\nexport { Counter };\nexport default Recipes;","import React, { Component } from 'react';\nimport './search.css';\nimport Recipes from './recipes-view.js';\nimport { FaPlus, FaTimes } from 'react-icons/fa';\n\nclass Search extends Component {\n    //assigns initial state\n    constructor(props) {\n        super(props);\n\n        this.state = { \n            //properties of state object\n            inputValue: \"\",\n            ingredients: [],\n            recipesVisible: false,\n            refreshRecipes: false,\n            searchURL: \"\"\n        };\n    }\n\n    //retrieve current input value\n    updateInput(key, value) {\n        this.setState( {\n            [key]: value\n        });\n    }\n\n    //delete \n    deleteIngredient(id) {\n        let ingredients = [...this.state.ingredients];\n        \n        ingredients = ingredients.filter(ingredient => ingredient.id !== id);\n\n        this.setState({\n            ingredients: ingredients\n        });\n    }\n\n    addIngredient() {\n        const newIngredient = {\n            id: 1 + Math.random(),\n            value: this.state.inputValue.slice()\n        }\n        //copy array\n        let ingredients = [...this.state.ingredients];\n\n        //add ingredient to array\n        ingredients.push(newIngredient);\n\n        //reset state\n        this.setState ({\n            ingredients: ingredients,\n            inputValue: \"\"\n        });\n    }\n\n    getRequestURL() {\n        let requestURL = \"https://api.spoonacular.com/recipes/findByIngredients?apiKey=eebaf36af5f24fd3ae3a2bd4095cf3cc&ingredients=\";\n        let noDuplicates = [];\n\n        //get rid of duplicate ingredients\n        let nameArray = this.state.ingredients.map(ingredient => {return ingredient.value});\n        nameArray.forEach(name => {\n            if(!noDuplicates.includes(name)) {\n                noDuplicates.push(name);\n            }\n        })\n    \n        const arrayLength = noDuplicates.length;\n\n        noDuplicates.forEach(ingredient => {\n            //check if ingredient is not the last one in the array\n            if (ingredient!== noDuplicates[arrayLength-1]) {    \n                requestURL += ingredient + \",+\";\n            }\n            else {\n                requestURL += ingredient;\n            } \n        });\n        requestURL += \"&number=50\";\n        return requestURL;\n    }\n\n    search() {\n        //trigger rendering of recipes section based on click of search button\n        if (this.state.recipesVisible) {\n            this.setState ({\n                refreshRecipes: !this.state.refreshRecipes,\n                searchURL: this.getRequestURL()\n            })\n        }\n        //set recipe section to visible \n        else {\n            this.setState ({\n                recipesVisible: true,\n                searchURL: this.getRequestURL()\n            });\n        }\n    }\n\n    //read from input field\n    //continuously render ingredient list\n    render() { \n        return ( \n            <div>\n                <header>\n                    <h1>Cook IT</h1>\n                    <div className=\"input container\">\n                        <input className=\"input-field\"\n                        type=\"text\"\n                        placeholder=\"Add an ingredient\"\n                        value = {this.state.inputValue}\n                        onChange = {event => this.updateInput(\"inputValue\", event.target.value)}\n                        />\n                        <button id=\"add-button\" onClick={()=> this.addIngredient()}><FaPlus/></button>\n                    </div>\n                </header>\n                <section id=\"ingredients\">\n                    <ul className=\"ingredient list\">\n                        {this.state.ingredients.map(ingredient => {\n                            return (<li key={ingredient.id}>{ingredient.value}\n                                    <button id=\"delete-button\" onClick={() => this.deleteIngredient(ingredient.id)}><FaTimes/></button>\n                                    </li>\n                            );\n                        })}\n                    <button disabled={this.state.ingredients.length === 0} id=\"search-button\" onClick={() => this.search()}>Find recipes</button>\n                    </ul>\n                </section>\n                <section id=\"recipes\">{this.state.recipesVisible && <Recipes url = {this.state.searchURL} \n                refresh = {this.state.refreshRecipes}/>}\n                </section>\n            </div>\n        );\n    }\n}\n \nexport default Search;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Search from './components/search';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Search/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}